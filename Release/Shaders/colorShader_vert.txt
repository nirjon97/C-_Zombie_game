#version 130
// The vertex shader operates for each vertex 

// Input data from the VBO. Each vertex is 2 floats
in vec2 vertexPosition;
//Input the color 
in vec4 vertexColor;
//Input the UV coordinate
in vec2 vertexUV;

//output the mix color for fragment shader process
out vec4 fragmentColor;

//stop interpulation
//flat out vec4 fragmentColor;

//output the fragment position for color changing
out vec2 fragmentPosition;

//Output the UV coordinate and transfer to fragment step
out  vec2 fragmentUV;

//For ortho matrix, get the normalize device coordinate position
uniform mat4 P;

void main(){
  // set x,y position on the screen 
  gl_Position.xy = (P*vec4(vertexPosition,0.0,1.0)).xy ;
  // z position set 0 because it use only 2D in this case
  gl_Position.z = 0.0;
  //Indicate the coordinate are normalized 
  gl_Position.w = 1.0;
  //transfer the color from vertex shader to the fragment shader step
  fragmentColor	= vertexColor;
  
  //set the vertex position to fragment position for change color base on vertex position
  fragmentPosition = vertexPosition;
  
  fragmentUV = vec2(vertexUV.x,1.0-vertexUV.y);
}